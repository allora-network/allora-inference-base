# This workflow will build and push a new container image to Amazon ECR,
# and then will deploy a new task definition to Amazon ECS which will be run by Fargate when a release is created
name: Build and Push docker image to ECR

on:
  push:
    branches:
      - main
  pull_request:

concurrency:
  group: ${{ github.ref }}
  cancel-in-progress: true
jobs:
  build-push:
    name: Build and Push docker image
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build, tag, and push image to Amazon ECR
        id: build-push-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: ${{github.event.repository.name}}       # Naming convention: ECR registry name == GITHUB repo name
          MAIN_BRANCH: main                                       # Images from this branch will be tagged as "latest"
        run: |
          IMAGE_TAG="${GITHUB_SHA:0:8}"
          EXTRA_IMAGE_TAGS="dev-latest"

          #! Add latest tag only if on MAIN_BRANCH branch
          if [[ ${GITHUB_REF} == "refs/heads/${MAIN_BRANCH}" ]]; then
            EXTRA_IMAGE_TAGS="${EXTRA_IMAGE_TAGS};latest"
          fi

          # compute-node HEADS
          ECR_REPOSITORY_HEAD="${ECR_REPOSITORY}-head"

          docker build --pull -f docker/Dockerfile_head \
              --build-arg "GH_TOKEN=${{ secrets.GH_READONLY_PAT }}" \
              -t $ECR_REGISTRY/$ECR_REPOSITORY_HEAD:$IMAGE_TAG .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY_HEAD:$IMAGE_TAG

          # Build and PUSH additional tags
          for tag in $(echo $EXTRA_IMAGE_TAGS| tr ";" "\n"); do
            docker tag $ECR_REGISTRY/$ECR_REPOSITORY_HEAD:$IMAGE_TAG $ECR_REGISTRY/$ECR_REPOSITORY_HEAD:$tag
            docker push $ECR_REGISTRY/$ECR_REPOSITORY_HEAD:$tag
          done

          # Build a docker container and push it to ECR so that it can be deployed to ECS.
          # compute-node workers
          docker build --pull -f docker/Dockerfile \
              --build-arg "GH_TOKEN=${{ secrets.GH_READONLY_PAT }}" \
              -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG

          # Build and PUSH additional tags
          for tag in $(echo $EXTRA_IMAGE_TAGS| tr ";" "\n"); do
            docker tag $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG $ECR_REGISTRY/$ECR_REPOSITORY:$tag
            docker push $ECR_REGISTRY/$ECR_REPOSITORY:$tag
          done
