# This workflow will build and push a new container image to Amazon ECR,
# and then will deploy a new task definition to Amazon ECS which will be run by Fargate when a release is created
name: Build and Push docker image to Docker Hub

on:
  push:
    tags:
      - 'v*'
      - dev-latest

concurrency:
  group: ${{ github.ref }}
  cancel-in-progress: true

jobs:
  build-push:
    name: Build and Push docker image
    runs-on: ubuntu-latest

    steps:
      - name: Set BLS_EXTENSION_VER for main branch
        run: echo "BLS_EXTENSION_VER=v0.1.4" >> $GITHUB_ENV
        if: github.ref == 'refs/heads/main'

      - name: Checkout
        uses: actions/checkout@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_PASSWORD }}

      - name: Build, tag, and push image to Docker Hub
        id: build-push-image
        env:
          DOCKERHUB_USERNAME: alloranetwork
          DOCKERHUB_REPOSITORY: ${{github.event.repository.name}}
        run: |
          GIT_TAG="$(echo $GITHUB_REF| sed 's#refs/tags/##')"

          IMAGE_TAG="${GITHUB_SHA:0:8}"
          EXTRA_IMAGE_TAGS=$GIT_TAG

          if [[ ${GIT_TAG} == v* ]]; then
            EXTRA_IMAGE_TAGS="${EXTRA_IMAGE_TAGS};latest"
          fi

          DOCKERHUB_REPOSITORY_HEAD="${DOCKERHUB_REPOSITORY}-head"

          docker build --pull -f docker/Dockerfile_head \
              --build-arg "GH_TOKEN=${{ secrets.GH_READONLY_PAT }}" \
              -t $DOCKERHUB_USERNAME/$DOCKERHUB_REPOSITORY_HEAD:$IMAGE_TAG .
          docker push $DOCKERHUB_USERNAME/$DOCKERHUB_REPOSITORY_HEAD:$IMAGE_TAG

          for tag in $(echo $EXTRA_IMAGE_TAGS| tr ";" "\n"); do
            docker tag $DOCKERHUB_USERNAME/$DOCKERHUB_REPOSITORY_HEAD:$IMAGE_TAG $DOCKERHUB_USERNAME/$DOCKERHUB_REPOSITORY_HEAD:$tag
            docker push $DOCKERHUB_USERNAME/$DOCKERHUB_REPOSITORY_HEAD:$tag
          done

          docker build --pull -f docker/Dockerfile_worker \
              --build-arg "GH_TOKEN=${{ secrets.GH_READONLY_PAT }}" \
              -t $DOCKERHUB_USERNAME/$DOCKERHUB_REPOSITORY:$IMAGE_TAG .
          docker push $DOCKERHUB_USERNAME/$DOCKERHUB_REPOSITORY:$IMAGE_TAG

          for tag in $(echo $EXTRA_IMAGE_TAGS| tr ";" "\n"); do
            docker tag $DOCKERHUB_USERNAME/$DOCKERHUB_REPOSITORY:$IMAGE_TAG $DOCKERHUB_USERNAME/$DOCKERHUB_REPOSITORY:$tag
            docker push $DOCKERHUB_USERNAME/$DOCKERHUB_REPOSITORY:$tag
          done

          # With python 3.9

          docker build --pull -f docker/Dockerfile_worker_py3.9 \
              --build-arg "GH_TOKEN=${{ secrets.GH_READONLY_PAT }}" \
              -t $DOCKERHUB_USERNAME/$DOCKERHUB_REPOSITORY:python3.9-$IMAGE_TAG .
          docker push $DOCKERHUB_USERNAME/$DOCKERHUB_REPOSITORY:python3.9-$IMAGE_TAG

          for tag in $(echo $EXTRA_IMAGE_TAGS| tr ";" "\n"); do
            docker tag $DOCKERHUB_USERNAME/$DOCKERHUB_REPOSITORY:python3.9-$IMAGE_TAG $DOCKERHUB_USERNAME/$DOCKERHUB_REPOSITORY:python3.9-$tag
            docker push $DOCKERHUB_USERNAME/$DOCKERHUB_REPOSITORY:python3.9-$tag
          done